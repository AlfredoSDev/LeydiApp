/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import clases.Conexion;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Alfredo
 */
public class CuentasDeClientes extends javax.swing.JFrame {

    /**
     * Creates new form CuentasDeClientes
     */
    String clienteSelecionado = "";
    DefaultTableModel modeloClientes = new DefaultTableModel();

    public void crearTablaClientes() {
        TABLA_CLIENTES = new JTable(modeloClientes);
        SCROLL_TABLA_CLIENTES.setViewportView(TABLA_CLIENTES);

        modeloClientes.addColumn("Lista de clientes");

    }

    public void llenarCampos(String seleccion) {
        try {
            Connection cn = Conexion.conetar();
            PreparedStatement pst = cn.prepareStatement(
                    "select * from cuentas where nombre = '" + seleccion + "'");

            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                ENTRADA_NOMBRE_DEL_CLIENTE.setText(rs.getString("nombre"));
                ENTRADA_SALDO_POSITIVO.setText(rs.getString("saldo_positivo"));
                ENTRADA_SALDO_NEGATIVO.setText(rs.getString("saldo_negativo"));
                ENTRADA_NOTAS.setText(rs.getString("notas"));

            }

            cn.close();

        } catch (SQLException e) {
            System.err.println("ERROR al llamar al alumno:\n" + e);

            JOptionPane.showMessageDialog(null, "Error, contacte con el desarrollador del software");
        }
    }

    public void actualizarTablaClientes() {
        try {
            Connection cn = Conexion.conetar();
            PreparedStatement pst = cn.prepareStatement(
                    "select nombre from cuentas order by nombre");

            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                Object[] fila = new Object[1];

                for (int i = 0; i < 1; i++) {
                    fila[i] = rs.getObject(i + 1);
                }
                modeloClientes.addRow(fila);
            }

            cn.close();

        } catch (SQLException e) {
            System.err.println("Falla en la clase 'CuentasDeClientes.java', linea 57: " + e.getErrorCode() + "\n" + e);
            JOptionPane.showMessageDialog(null, "Error, contactar al programador.");
        }
    }
    
    @Override
    public Image getIconImage() {
        Image setValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("imagenes/Protologo_3_192x192.png"));
        return setValue;
    }

    public CuentasDeClientes() {
        initComponents();
        this.setLocationRelativeTo(null);
        crearTablaClientes();
        actualizarTablaClientes();

        TABLA_CLIENTES.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_poin = TABLA_CLIENTES.rowAtPoint(e.getPoint());

                if (fila_poin > -1) {
                    clienteSelecionado = (String) modeloClientes.getValueAt(fila_poin, 0);
                    llenarCampos(clienteSelecionado);

                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SCROLL_TABLA_CLIENTES = new javax.swing.JScrollPane();
        TABLA_CLIENTES = new javax.swing.JTable();
        ENTRADA_NOMBRE_DEL_CLIENTE = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ENTRADA_SALDO_POSITIVO = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        ENTRADA_SALDO_NEGATIVO = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ENTRADA_NOTAS = new javax.swing.JTextArea();
        BOTON_ACTUALIZAR = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        BOTON_ELIMINAR = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Clientes");
        setIconImage(getIconImage());
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TABLA_CLIENTES.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1"
            }
        ));
        SCROLL_TABLA_CLIENTES.setViewportView(TABLA_CLIENTES);

        getContentPane().add(SCROLL_TABLA_CLIENTES, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, 344, 578));

        ENTRADA_NOMBRE_DEL_CLIENTE.setBorder(null);
        getContentPane().add(ENTRADA_NOMBRE_DEL_CLIENTE, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 30, 430, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Nombre del cliente:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 11, 110, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Saldo positivo:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 50, -1, -1));

        ENTRADA_SALDO_POSITIVO.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        ENTRADA_SALDO_POSITIVO.setForeground(new java.awt.Color(51, 153, 0));
        ENTRADA_SALDO_POSITIVO.setBorder(null);
        ENTRADA_SALDO_POSITIVO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ENTRADA_SALDO_POSITIVOActionPerformed(evt);
            }
        });
        getContentPane().add(ENTRADA_SALDO_POSITIVO, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 70, 430, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Saldo negativo:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 90, -1, -1));

        ENTRADA_SALDO_NEGATIVO.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        ENTRADA_SALDO_NEGATIVO.setForeground(new java.awt.Color(153, 0, 0));
        ENTRADA_SALDO_NEGATIVO.setBorder(null);
        getContentPane().add(ENTRADA_SALDO_NEGATIVO, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 110, 430, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Nota:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 130, -1, -1));

        jScrollPane2.setBorder(null);

        ENTRADA_NOTAS.setColumns(20);
        ENTRADA_NOTAS.setRows(5);
        ENTRADA_NOTAS.setBorder(null);
        jScrollPane2.setViewportView(ENTRADA_NOTAS);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 150, 430, 400));

        BOTON_ACTUALIZAR.setBackground(new java.awt.Color(0, 0, 0));
        BOTON_ACTUALIZAR.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        BOTON_ACTUALIZAR.setForeground(new java.awt.Color(255, 255, 255));
        BOTON_ACTUALIZAR.setText("ACTUALIZAR");
        BOTON_ACTUALIZAR.setBorder(null);
        BOTON_ACTUALIZAR.setFocusable(false);
        BOTON_ACTUALIZAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BOTON_ACTUALIZARActionPerformed(evt);
            }
        });
        getContentPane().add(BOTON_ACTUALIZAR, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 560, 140, 30));

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("LIMPIAR CAMPOS");
        jButton1.setBorder(null);
        jButton1.setFocusable(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 560, 140, 30));

        BOTON_ELIMINAR.setBackground(new java.awt.Color(0, 0, 0));
        BOTON_ELIMINAR.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        BOTON_ELIMINAR.setForeground(new java.awt.Color(204, 0, 0));
        BOTON_ELIMINAR.setText("ELIMINAR");
        BOTON_ELIMINAR.setBorder(null);
        BOTON_ELIMINAR.setFocusable(false);
        BOTON_ELIMINAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BOTON_ELIMINARActionPerformed(evt);
            }
        });
        getContentPane().add(BOTON_ELIMINAR, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 560, 130, 30));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo_1000x1000.png"))); // NOI18N
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 600));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ENTRADA_SALDO_POSITIVOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ENTRADA_SALDO_POSITIVOActionPerformed
        //Error
    }//GEN-LAST:event_ENTRADA_SALDO_POSITIVOActionPerformed

    private void BOTON_ACTUALIZARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BOTON_ACTUALIZARActionPerformed
        int validacion = 0;

        String nombre, salP, salN, notas;

        nombre = ENTRADA_NOMBRE_DEL_CLIENTE.getText().trim().toUpperCase();
        salP = ENTRADA_SALDO_POSITIVO.getText().trim().toUpperCase();
        salN = ENTRADA_SALDO_NEGATIVO.getText().trim().toUpperCase();
        notas = ENTRADA_NOTAS.getText().trim().toUpperCase();

        if (nombre.equals("")) {
            JOptionPane.showMessageDialog(null, "Nombre del cliente no puede estar vacio");
            validacion++;
        } else {
            validacion = 0;
        }

        if (validacion == 0) {

            try {
                Connection cn = Conexion.conetar();
                PreparedStatement pst = cn.prepareStatement(
                        "select nombre from cuentas where nombre = '" + nombre + "'");
                ResultSet rs = pst.executeQuery();
                if (rs.next()) {
                    try {
                        Connection cnr = Conexion.conetar();
                        PreparedStatement pstr = cnr.prepareStatement(
                                "update cuentas set nombre=?, saldo_positivo =?, saldo_negativo =?, notas=? where nombre = '" + nombre + "'");

                        pstr.setString(1, nombre);
                        pstr.setString(2, salP);
                        pstr.setString(3, salN);
                        pstr.setString(4, notas);

                        pstr.executeUpdate();
                        cnr.close();

                        JOptionPane.showMessageDialog(null, "Accion exitosa");

                        ENTRADA_NOMBRE_DEL_CLIENTE.setText("");
                        ENTRADA_SALDO_POSITIVO.setText("");
                        ENTRADA_SALDO_NEGATIVO.setText("");
                        ENTRADA_NOTAS.setText("");
                    } catch (SQLException er) {
                        JOptionPane.showMessageDialog(null, er.getErrorCode() + "\n" + er);
                    }
                } else {
                    try {
                        Connection cnn = Conexion.conetar();
                        PreparedStatement pstt = cnn.prepareStatement(
                                "insert into cuentas values (?,?,?,?,?)");

                        pstt.setString(1, "0");
                        pstt.setString(2, nombre);
                        pstt.setString(3, salP);
                        pstt.setString(4, salN);
                        pstt.setString(5, notas);

                        pstt.executeUpdate();
                        cnn.close();

                        JOptionPane.showMessageDialog(null, "Accion exitosa");

                        ENTRADA_NOMBRE_DEL_CLIENTE.setText("");
                        ENTRADA_SALDO_POSITIVO.setText("");
                        ENTRADA_SALDO_NEGATIVO.setText("");
                        ENTRADA_NOTAS.setText("");
                    } catch (SQLException er) {
                        System.err.println(er);
                    }
                }

                cn.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e.getErrorCode() + "\n" + e);
            }
        }

        modeloClientes.setRowCount(0);
        actualizarTablaClientes();
    }//GEN-LAST:event_BOTON_ACTUALIZARActionPerformed

    private void BOTON_ELIMINARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BOTON_ELIMINARActionPerformed
        int estarSeguro = JOptionPane.showConfirmDialog(null, "¿Estás seguro de querer eliminar al cliente: '" + ENTRADA_NOMBRE_DEL_CLIENTE.getText().toUpperCase() + "'?");
        try {
            if (estarSeguro == 0) {
                Connection cn = Conexion.conetar();
                PreparedStatement pst = cn.prepareStatement(
                    "delete from cuentas where nombre = '" + ENTRADA_NOMBRE_DEL_CLIENTE.getText().toUpperCase().trim() + "'");
                pst.executeUpdate();
                cn.close();
                JOptionPane.showMessageDialog(null, "Eliminado");
            }
        } catch (Exception e) {
            System.err.println("ERROR al eliminar al cliente:\n" + e);

            JOptionPane.showMessageDialog(null, "Error, contacte con el desarrollador del software");
        }
        modeloClientes.setRowCount(0);
        actualizarTablaClientes();
        ENTRADA_NOMBRE_DEL_CLIENTE.setText("");
        ENTRADA_SALDO_POSITIVO.setText("");
        ENTRADA_SALDO_NEGATIVO.setText("");
        ENTRADA_NOTAS.setText("");
    }//GEN-LAST:event_BOTON_ELIMINARActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ENTRADA_NOMBRE_DEL_CLIENTE.setText("");
        ENTRADA_SALDO_POSITIVO.setText("");
        ENTRADA_SALDO_NEGATIVO.setText("");
        ENTRADA_NOTAS.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CuentasDeClientes.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CuentasDeClientes.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CuentasDeClientes.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CuentasDeClientes.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CuentasDeClientes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BOTON_ACTUALIZAR;
    private javax.swing.JButton BOTON_ELIMINAR;
    private javax.swing.JTextField ENTRADA_NOMBRE_DEL_CLIENTE;
    private javax.swing.JTextArea ENTRADA_NOTAS;
    private javax.swing.JTextField ENTRADA_SALDO_NEGATIVO;
    private javax.swing.JTextField ENTRADA_SALDO_POSITIVO;
    private javax.swing.JScrollPane SCROLL_TABLA_CLIENTES;
    private javax.swing.JTable TABLA_CLIENTES;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
